//
//  Copyright (c) 2020 gematik GmbH
//  
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//  
//     http://www.apache.org/licenses/LICENSE-2.0
//  
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

//
//  This file was generated from an xsd file and represents a simple or complex type of it.
//  Generated by a fork of xsd2cocoa (see https://github.com/Daij-Djan/xsd2cocoa) and a specified custom transform template.
//

import Foundation
import XMLTools

// MARK: - Generated file, do not edit. Any edits of this file will be overwritten and thus discarded.
public class DPE_Persoenliche_Erklaerungen {
    
    public static let namespacePrefix: String? = "DPE"
    public static let namespaceUri: String? = "http://ws.gematik.de/fa/nfds/DPE_Document/v1.0"
    
    // attributes:
    public var ID_DPE: String
    public var DPE_letzte_Aktualisierung_time: String
    public var DPE_letzte_Aktualisierung_date: String
    
    // elements:
    public var DPE_Versicherter: DPE_DPE_Versicherter
    public var DPE_Versicherter_Einwilligung: DPE_DPE_Versicherter_Einwilligung?
    public var DPE_Gewebe_Organspendeerklaerung: DPE_DPE_Gewebe_Organspendeerklaerung?
    public var DPE_Vorsorgevollmacht: DPE_DPE_Vorsorgevollmacht?
    public var DPE_Patientenverfuegung: DPE_DPE_Patientenverfuegung?
    
    // default Constructor
    public init() {
        
        self.ID_DPE = String()
        self.DPE_letzte_Aktualisierung_time = String()
        self.DPE_letzte_Aktualisierung_date = String()
        
        self.DPE_Versicherter = DPE_DPE_Versicherter()
        self.DPE_Versicherter_Einwilligung = nil
        self.DPE_Gewebe_Organspendeerklaerung = nil
        self.DPE_Vorsorgevollmacht = nil
        self.DPE_Patientenverfuegung = nil
        
    }
    
    // copy Constructor
    public init(_ _DPE_Persoenliche_Erklaerungen: DPE_Persoenliche_Erklaerungen ) {
        
        self.ID_DPE = _DPE_Persoenliche_Erklaerungen.ID_DPE
        self.DPE_letzte_Aktualisierung_time = _DPE_Persoenliche_Erklaerungen.DPE_letzte_Aktualisierung_time
        self.DPE_letzte_Aktualisierung_date = _DPE_Persoenliche_Erklaerungen.DPE_letzte_Aktualisierung_date
        
        self.DPE_Versicherter = _DPE_Persoenliche_Erklaerungen.DPE_Versicherter
        self.DPE_Versicherter_Einwilligung = _DPE_Persoenliche_Erklaerungen.DPE_Versicherter_Einwilligung
        self.DPE_Gewebe_Organspendeerklaerung = _DPE_Persoenliche_Erklaerungen.DPE_Gewebe_Organspendeerklaerung
        self.DPE_Vorsorgevollmacht = _DPE_Persoenliche_Erklaerungen.DPE_Vorsorgevollmacht
        self.DPE_Patientenverfuegung = _DPE_Persoenliche_Erklaerungen.DPE_Patientenverfuegung
        
    }
    
    public class func deserialize(_ infoset: Infoset) -> DPE_Persoenliche_Erklaerungen {
        
        let _DPE_Persoenliche_Erklaerungen = DPE_Persoenliche_Erklaerungen()
        
        _DPE_Persoenliche_Erklaerungen.ID_DPE = String.deserialize(infoset.attr("ID_DPE"))
        _DPE_Persoenliche_Erklaerungen.DPE_letzte_Aktualisierung_time = String.deserialize(infoset.attr("DPE_letzte_Aktualisierung_time"))
        _DPE_Persoenliche_Erklaerungen.DPE_letzte_Aktualisierung_date = String.deserialize(infoset.attr("DPE_letzte_Aktualisierung_date"))
        
        let uriDPE_Versicherter = DPE_DPE_Versicherter.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameDPE_Versicherter = QName("DPE_Versicherter", uri: uriDPE_Versicherter)
        _DPE_Persoenliche_Erklaerungen.DPE_Versicherter = DPE_DPE_Versicherter.deserialize(infoset.select(qNameDPE_Versicherter))
        
        let uriDPE_Versicherter_Einwilligung = DPE_DPE_Versicherter_Einwilligung.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameDPE_Versicherter_Einwilligung = QName("DPE_Versicherter_Einwilligung", uri: uriDPE_Versicherter_Einwilligung)
        _DPE_Persoenliche_Erklaerungen.DPE_Versicherter_Einwilligung = DPE_DPE_Versicherter_Einwilligung?.deserialize(infoset.select(qNameDPE_Versicherter_Einwilligung))
        
        let uriDPE_Gewebe_Organspendeerklaerung = DPE_DPE_Gewebe_Organspendeerklaerung.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameDPE_Gewebe_Organspendeerklaerung = QName("DPE_Gewebe_Organspendeerklaerung", uri: uriDPE_Gewebe_Organspendeerklaerung)
        _DPE_Persoenliche_Erklaerungen.DPE_Gewebe_Organspendeerklaerung = DPE_DPE_Gewebe_Organspendeerklaerung?.deserialize(infoset.select(qNameDPE_Gewebe_Organspendeerklaerung))
        
        let uriDPE_Vorsorgevollmacht = DPE_DPE_Vorsorgevollmacht.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameDPE_Vorsorgevollmacht = QName("DPE_Vorsorgevollmacht", uri: uriDPE_Vorsorgevollmacht)
        _DPE_Persoenliche_Erklaerungen.DPE_Vorsorgevollmacht = DPE_DPE_Vorsorgevollmacht?.deserialize(infoset.select(qNameDPE_Vorsorgevollmacht))
        
        let uriDPE_Patientenverfuegung = DPE_DPE_Patientenverfuegung.namespaceUri ?? self.namespaceUri ?? infoset.namespaceContext.defaultURI!
        let qNameDPE_Patientenverfuegung = QName("DPE_Patientenverfuegung", uri: uriDPE_Patientenverfuegung)
        _DPE_Persoenliche_Erklaerungen.DPE_Patientenverfuegung = DPE_DPE_Patientenverfuegung?.deserialize(infoset.select(qNameDPE_Patientenverfuegung))
        
        return _DPE_Persoenliche_Erklaerungen
    }
}

extension Optional where Wrapped == DPE_Persoenliche_Erklaerungen {
    public static func deserialize(_ infoset: Infoset) -> DPE_Persoenliche_Erklaerungen? {
        if infoset.count == 0 {
            return nil
        } else {
            return DPE_Persoenliche_Erklaerungen.deserialize(infoset)
        }
    }
}

extension Array where Element: DPE_Persoenliche_Erklaerungen {
    public var namespaceUri: String? {
        get {
            return DPE_Persoenliche_Erklaerungen.namespaceUri
        }
    }
    
    public static func deserialize(_ infoset: Infoset) -> [DPE_Persoenliche_Erklaerungen] {
        return infoset.map { (element: Infoset) in
        DPE_Persoenliche_Erklaerungen.deserialize(element)
    }
}
}

// utility functions
fileprivate extension String {
    static let namespacePrefix: String? = nil
    static let namespaceUri: String? = nil
    
    static func deserialize(_ infoset: Infoset) -> String {
        return infoset.text
    }
}

fileprivate extension Optional where Wrapped == String {
    static func deserialize(_ infoset: Infoset) -> String? {
        if infoset.count == 0 {
            return nil
        } else {
            return String.deserialize(infoset)
        }
    }
}

fileprivate extension Int {
    static let namespacePrefix: String? = nil
    static let namespaceUri: String? = nil
    
    static func deserialize(_ infoset: Infoset) -> Int {
        guard let ret = Int(infoset.text) else {
            return 0
        }
        return ret
    }
}

fileprivate extension Optional where Wrapped == Int {
    static func deserialize(_ infoset: Infoset) -> Int? {
        if infoset.count == 0 {
            return nil
        } else {
            return Int.deserialize(infoset)
        }
    }
}

fileprivate extension Double {
    static let namespacePrefix: String? = nil
    static let namespaceUri: String? = nil
    
    static func deserialize(_ infoset: Infoset) -> Double {
        guard let ret = Double(infoset.text) else {
            return 0
        }
        return ret
    }
}

fileprivate extension Optional where Wrapped == Double {
    static func deserialize(_ infoset: Infoset) -> Double? {
        if infoset.count == 0 {
            return nil
        } else {
            return Double.deserialize(infoset)
        }
    }
}

